#include <bits/stdc++.h>
using namespace std;

vector<int> climbingLeaderboard(vector<int> ranked, vector<int> player) {
    // Step 1: Remove duplicates from leaderboard
    vector<int> uniqueRanked;
    uniqueRanked.push_back(ranked[0]);
    for (int i = 1; i < ranked.size(); i++) {
        if (ranked[i] != ranked[i - 1])
            uniqueRanked.push_back(ranked[i]);
    }

    vector<int> result;
    int n = uniqueRanked.size();
    int i = n - 1; // pointer for leaderboard (start from lowest rank)

    // Step 2: For each player score (ascending order)
    for (int score : player) {
        // Move up while player beats or equals the leaderboard scores
        while (i >= 0 && score >= uniqueRanked[i]) {
            i--;
        }
        // Rank is (i + 2) because i points to index just higher than player's score
        result.push_back(i + 2);
    }

    return result;
}

int main() {
    int n;
    cin >> n;
    vector<int> ranked(n);
    for (int i = 0; i < n; i++) cin >> ranked[i];

    int m;
    cin >> m;
    vector<int> player(m);
    for (int i = 0; i < m; i++) cin >> player[i];

    vector<int> result = climbingLeaderboard(ranked, player);
    for (int rank : result)
        cout << rank << "\n";

    return 0;
}
